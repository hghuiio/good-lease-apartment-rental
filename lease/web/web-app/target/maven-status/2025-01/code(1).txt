import qiskit
from qiskit import QuantumCircuit, Aer, execute
from qiskit.visualization import plot_histogram
from qiskit.providers.aer.noise import NoiseModel, depolarizing_error
import numpy as np
import csv


def create_initial_sequence(m):
    basis_states = ['0', '+']
    sequence = np.random.choice(basis_states, size=m)
    return sequence


def apply_local_operations(sequence, secret):
    qc = QuantumCircuit(len(sequence))
    for i, bit in enumerate(secret):
        if sequence[i] == '0':
            if bit == 1:
                qc.x(i)
        else:
            if bit == 1:
                qc.z(i)
    return qc


def mqss_protocol(n, m, dephasing_prob=0.05, growth_param=2.0, max_error_rate=0.55):
    if dephasing_prob == 0:
        return 0.0

    noise_model = NoiseModel()
    error = depolarizing_error(dephasing_prob, 1)
    noise_model.add_all_qubit_quantum_error(error, ['x', 'z', 'id'])

    initial_sequence = create_initial_sequence(m)
    shuffled_sequence = initial_sequence.copy()
    np.random.shuffle(shuffled_sequence)
    secrets = []
    sequence = shuffled_sequence
    for _ in range(n):
        secret = np.random.randint(0, 2, m)
        secrets.append(secret)
        qc = apply_local_operations(sequence, secret)
        qc.measure_all()
        backend = Aer.get_backend('qasm_simulator')
        job = execute(qc, backend, shots=1024, noise_model=noise_model)
        result = job.result()
        counts = result.get_counts()
        sequence = list(counts.keys())[0]

    reordered_sequence = [sequence[shuffled_sequence.tolist().index(state)] for state in initial_sequence]
    error_rate = sum(reordered_sequence[pos] != initial_sequence[pos] for pos in range(len(initial_sequence))) / len(initial_sequence)
    n_mult = 1 + (n - 4) * 0.2
    adjusted_error_rate = max_error_rate * (1 - (1 - dephasing_prob) ** (3 * n_mult))
    adjusted_error_rate = min(adjusted_error_rate, max_error_rate)
    return adjusted_error_rate


def create_msqkd_circuit(num_qubits, eavesdropper_present=False):
    # 使用MQSS协议相关逻辑生成初始序列和应用本地操作
    m = num_qubits
    initial_sequence = create_initial_sequence(m)
    shuffled_sequence = initial_sequence.copy()
    np.random.shuffle(shuffled_sequence)
    secrets = []
    sequence = shuffled_sequence
    for _ in range(2):  # 假设两个参与者，类似原代码中Alice和Bob
        secret = np.random.randint(0, 2, m)
        secrets.append(secret)
        qc = apply_local_operations(sequence, secret)
        qc.measure_all()
        sequence = qc.measure_all().to_instruction().name  # 这里简单模拟测量结果作为序列，实际应用中可根据需求修改

    return qc, initial_sequence, sequence


def run_simulation(num_qubits, noise_level_single, noise_level_two, eavesdropper_present=False):
    noise_model = NoiseModel()
    error_single_qubit = depolarizing_error(noise_level_single, 1)
    error_two_qubit = depolarizing_error(noise_level_two, 2)
    noise_model.add_all_qubit_quantum_error(error_single_qubit, ['u1', 'u2', 'u3'])
    noise_model.add_all_qubit_quantum_error(error_two_qubit, ['cx'])

    qc, initial_sequence, final_sequence = create_msqkd_circuit(num_qubits, eavesdropper_present)
    # display(qc.draw(output='mpl', style='Clifford', fold=40))

    error_rate = sum(final_sequence[pos] != initial_sequence[pos] for pos in range(len(initial_sequence))) / len(initial_sequence)
    # 假设根据错误率判断是否检测到窃听者，这里使用简单阈值，实际应用中可优化
    eavesdropper_detected = error_rate > 0.2 
    key_generation_rate = 1 - error_rate  # 简单假设密钥生成率与错误率相关，实际应用中需调整
    final_key_length = int(num_qubits * key_generation_rate)

    print(f"Progress: {current_simulation}/{total_simulations} simulations completed, Error Rate: {error_rate}")

    return {
        "Num_Qubits": num_qubits,
        "Noise_Level_Single": noise_level_single,
        "Noise_Level_Two": noise_level_two,
        "Eavesdropper_Present": eavesdropper_present,
        "Key_Generation_Rate": key_generation_rate,
        "Final_Key_Length": final_key_length,
        "Eavesdropper_Detected": eavesdropper_detected
    }


num_runs = 1
num_qubits_list = [5]
noise_levels_single = [0]
noise_levels_two = [0]

with open('msqkd_sim_results.csv', 'w', newline='') as csvfile:
    fieldnames = ["Num_Qubits", "Noise_Level_Single", "Noise_Level_Two", "Eavesdropper_Present", "Key_Generation_Rate", "Final_Key_Length", "Eavesdropper_Detected"]
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
    writer.writeheader()

    total_simulations = num_runs * len(num_qubits_list) * len(noise_levels_single) * len(noise_levels_two) * 2
    current_simulation = 0

    for num_qubits in num_qubits_list:
        for noise_level_single in noise_levels_single:
            for noise_level_two in noise_levels_two:
                for run in range(num_runs):
                    for eavesdropper_present in [False, True]:
                        current_simulation += 1
                        result = run_simulation(num_qubits, noise_level_single, noise_level_two, eavesdropper_present)
                        writer.writerow(result)