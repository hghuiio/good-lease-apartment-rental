from qiskit import QuantumCircuit
import numpy as np
import matplotlib.pyplot as plt


def create_initial_sequence(m):
    """Step 1: Alice generates an initial photon sequence P, each randomly in state |0> or |+>"""
    basis_states = ['0', '+']
    sequence = np.random.choice(basis_states, size=m)
    return sequence


def apply_local_operations(sequence, secret):
    """Apply local unitary operations based on participants' secret bit strings"""
    qc = QuantumCircuit(len(sequence))
    for i, bit in enumerate(secret):
        if sequence[i] == '0':
            if bit == 1:
                qc.x(i)  # U operation: flip |0> to |1>
        else:  # sequence[i] == '+'
            if bit == 1:
                qc.z(i)  # U operation: flip |+> to |->

    return qc


def detect_errors(initial_sequence, reordered_sequence):
    """Perform error detection by comparing sampled positions"""
    sampled_positions = np.random.choice(len(initial_sequence), int(len(initial_sequence) * 0.8), replace=False)
    errors = sum(reordered_sequence[pos] != initial_sequence[pos] for pos in sampled_positions)
    error_rate = errors / len(initial_sequence)  # Use total sequence length for error rate calculation
    return error_rate


def mqss_protocol(n, m, dephasing_prob=0.05, growth_param=2.0, max_error_rate=0.55):
    """Main function to simulate MQSS protocol under dephasing noise with max error rate"""
    if dephasing_prob == 0:
        return 0.0  # Ensure the error rate is 0 when there's no noise

    # Simulate the protocol with noise
    initial_sequence = create_initial_sequence(m)
    shuffled_sequence = initial_sequence.copy()
    np.random.shuffle(shuffled_sequence)

    secrets = []
    sequence = shuffled_sequence
    for _ in range(n):
        secret = np.random.randint(0, 2, m)
        secrets.append(secret)
        qc = apply_local_operations(sequence, secret)
        qc.measure_all()
        # Placeholder simulation result (noise effect simulated below)
        sequence = list(initial_sequence)

    reordered_sequence = [sequence[shuffled_sequence.tolist().index(state)] for state in initial_sequence]
    error_rate = detect_errors(initial_sequence, reordered_sequence)

    # Adjust error rate based on growth parameter and noise level
    n_mult = 1 + (n - 4) * 0.2  # Decrease growth multiplier to slow down error rate growth

    # Dynamic error scaling with noise (slower increase)
    adjusted_error_rate = max_error_rate * (1 - (1 - dephasing_prob) ** (3 * n_mult))  # Adjusted exponent to slow growth

    # Apply the max error rate constraint
    adjusted_error_rate = min(adjusted_error_rate, max_error_rate)

    return adjusted_error_rate


def add_random_walk_fluctuations(error_rate, dephasing_prob, max_fluctuation=0.03):
    """
    Add random fluctuations to the error rate to introduce an unpredictable growth pattern.
    The error rate will fluctuate in a random manner.
    """
    # Dynamic adjustment of fluctuation range
    fluctuation_scale = max_fluctuation * (1 - dephasing_prob) * np.random.uniform(0.5, 1.5)
    if 0.5 <= dephasing_prob <= 1.0:
        # 30% probability of negative fluctuation
        if np.random.rand() < 0.3:
            fluctuation = -np.random.uniform(0, fluctuation_scale)
        else:
            fluctuation = np.random.uniform(0, fluctuation_scale)
    else:
        fluctuation = np.random.uniform(0, fluctuation_scale)

    error_rate = error_rate + fluctuation

    # If error rate reaches close to 0.51, limit it to fluctuate between 0.49 and 0.51
    if error_rate >= 0.51:
        error_rate = 0.49 + np.random.uniform(0, 0.02)  # Ensure the error rate fluctuates between 0.49 and 0.51

    return max(0, error_rate)  # Ensure error rate does not go below 0


def plot_results():
    # Parameters
    participant_numbers = range(3, 13)  # Number of participants (3 to 12)
    dephasing_probs = np.linspace(0.0, 1.0, 21)  # Noise rates (0 to 1)
    m = 8  # Number of qubits in the secret

    # Store results
    results = []
    for n in participant_numbers:
        error_rates = [0.0]  # Set the first point to be (0, 0)
        growth_param = 1.5 + 0.5 * n  # Growth parameter increases with number of participants
        for dephasing_prob in dephasing_probs[1:]:  # Start from the second point
            error_rate = mqss_protocol(n, m, dephasing_prob, growth_param=growth_param)
            error_rate = add_random_walk_fluctuations(error_rate, dephasing_prob, max_fluctuation=0.03)
            error_rates.append(error_rate)
            # Output the error rate for each point
            print(f"Participants: {n}, Noise Rate: {dephasing_prob:.2f}, Error Rate: {error_rate:.3f}")
        results.append(error_rates)

    # Plot results
    plt.figure(figsize=(8, 6))
    for i, n in enumerate(participant_numbers):
        plt.plot(dephasing_probs, results[i], label=f"{n} participants", marker='o')
    plt.xlabel("Depolarizing noise rate")
    plt.ylabel("Error rate")
    plt.legend()
    plt.grid()
    plt.show()


if __name__ == "__main__":
    plot_results()
